{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport productListReducer from './reducers/productProducer';\nimport cartReducer from './cart/reducers'; // import rootSaga from './saga'\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  cart: cartReducer\n}); // const cartItemsFromStorage = localStorage.getItem('cartItems')\n//   ? JSON.parse(localStorage.getItem('cartItems'))\n//   : [];\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [thunk, sagaMiddleware];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware))); // import productSaga from './product/saga'\n// function* rootSaga() {\n//   yield [\n//     fork()\n//   ]\n// }\n// sagaMiddleware.run(rootSaga)\n\nexport default store;","map":{"version":3,"sources":["C:/Users/uzuma/Desktop/hamdiRH/proshop mern/frontend/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","createSagaMiddleware","composeWithDevTools","productListReducer","cartReducer","reducer","productList","cart","sagaMiddleware","middleware","store","initialState"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,WAAP,MAAwB,iBAAxB,C,CACA;;AACA,MAAMC,OAAO,GAAGP,eAAe,CAAC;AAC9BQ,EAAAA,WAAW,EAAEH,kBADiB;AAE9BI,EAAAA,IAAI,EAAEH;AAFwB,CAAD,CAA/B,C,CAIA;AACA;AACA;AACA;AACA;;AACA,MAAMI,cAAc,GAAGP,oBAAoB,EAA3C;AACA,MAAMQ,UAAU,GAAG,CAACT,KAAD,EAAQQ,cAAR,CAAnB;AACA,MAAME,KAAK,GAAGb,WAAW,CACvBQ,OADuB,EAEvBM,YAFuB,EAGvBT,mBAAmB,CAACH,eAAe,CAAC,GAAGU,UAAJ,CAAhB,CAHI,CAAzB,C,CAKA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,eAAeC,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport productListReducer from './reducers/productProducer';\r\nimport cartReducer from './cart/reducers';\r\n// import rootSaga from './saga'\r\nconst reducer = combineReducers({\r\n  productList: productListReducer,\r\n  cart: cartReducer,\r\n});\r\n// const cartItemsFromStorage = localStorage.getItem('cartItems')\r\n//   ? JSON.parse(localStorage.getItem('cartItems'))\r\n//   : [];\r\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\r\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [thunk, sagaMiddleware];\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n// import productSaga from './product/saga'\r\n// function* rootSaga() {\r\n//   yield [\r\n//     fork()\r\n//   ]\r\n// }\r\n// sagaMiddleware.run(rootSaga)\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}