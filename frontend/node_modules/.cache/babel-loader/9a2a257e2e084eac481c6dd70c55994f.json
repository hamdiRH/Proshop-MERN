{"ast":null,"code":"import { createStore, combineReducers, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport createSagaMiddleware from 'redux-saga';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport productListReducer from './reducers/productProducer';\nimport cartReducer from './cart/reducers';\nimport productSaga from './product/saga'; // import rootSaga from './saga'\n\nconst reducer = combineReducers({\n  productList: productListReducer,\n  cart: cartReducer\n}); // const cartItemsFromStorage = localStorage.getItem('cartItems')\n//   ? JSON.parse(localStorage.getItem('cartItems'))\n//   : [];\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\n\nconst initialState = {};\nconst sagaMiddleware = createSagaMiddleware();\nconst middleware = [thunk, sagaMiddleware];\nconst store = createStore(reducer, initialState, composeWithDevTools(applyMiddleware(...middleware)));\n\nfunction* rootSaga() {\n  yield [fork(productSaga)];\n}\n\nsagaMiddleware.run(rootSaga);\nexport default store;","map":{"version":3,"sources":["C:/Users/uzuma/Desktop/hamdiRH/proshop mern/frontend/src/redux/store.js"],"names":["createStore","combineReducers","applyMiddleware","thunk","createSagaMiddleware","composeWithDevTools","productListReducer","cartReducer","productSaga","reducer","productList","cart","initialState","sagaMiddleware","middleware","store","rootSaga","fork","run"],"mappings":"AAAA,SAASA,WAAT,EAAsBC,eAAtB,EAAuCC,eAAvC,QAA8D,OAA9D;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAOC,oBAAP,MAAiC,YAAjC;AACA,SAASC,mBAAT,QAAoC,0BAApC;AACA,OAAOC,kBAAP,MAA+B,4BAA/B;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,WAAP,MAAwB,gBAAxB,C,CACA;;AACA,MAAMC,OAAO,GAAGR,eAAe,CAAC;AAC9BS,EAAAA,WAAW,EAAEJ,kBADiB;AAE9BK,EAAAA,IAAI,EAAEJ;AAFwB,CAAD,CAA/B,C,CAIA;AACA;AACA;AACA;;AACA,MAAMK,YAAY,GAAG,EAArB;AACA,MAAMC,cAAc,GAAGT,oBAAoB,EAA3C;AACA,MAAMU,UAAU,GAAG,CAACX,KAAD,EAAQU,cAAR,CAAnB;AACA,MAAME,KAAK,GAAGf,WAAW,CACvBS,OADuB,EAEvBG,YAFuB,EAGvBP,mBAAmB,CAACH,eAAe,CAAC,GAAGY,UAAJ,CAAhB,CAHI,CAAzB;;AAMA,UAAUE,QAAV,GAAqB;AACnB,QAAM,CACJC,IAAI,CAACT,WAAD,CADA,CAAN;AAGD;;AACDK,cAAc,CAACK,GAAf,CAAmBF,QAAnB;AACA,eAAeD,KAAf","sourcesContent":["import { createStore, combineReducers, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport { composeWithDevTools } from 'redux-devtools-extension';\r\nimport productListReducer from './reducers/productProducer';\r\nimport cartReducer from './cart/reducers';\r\nimport productSaga from './product/saga'\r\n// import rootSaga from './saga'\r\nconst reducer = combineReducers({\r\n  productList: productListReducer,\r\n  cart: cartReducer,\r\n});\r\n// const cartItemsFromStorage = localStorage.getItem('cartItems')\r\n//   ? JSON.parse(localStorage.getItem('cartItems'))\r\n//   : [];\r\n// const initialState = { cart: { cartItems: cartItemsFromStorage } };\r\nconst initialState = { };\r\nconst sagaMiddleware = createSagaMiddleware();\r\nconst middleware = [thunk, sagaMiddleware];\r\nconst store = createStore(\r\n  reducer,\r\n  initialState,\r\n  composeWithDevTools(applyMiddleware(...middleware)),\r\n);\r\n\r\nfunction* rootSaga() {\r\n  yield [\r\n    fork(productSaga)\r\n  ]\r\n}\r\nsagaMiddleware.run(rootSaga)\r\nexport default store;\r\n"]},"metadata":{},"sourceType":"module"}