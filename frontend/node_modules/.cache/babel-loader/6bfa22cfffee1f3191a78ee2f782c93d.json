{"ast":null,"code":"import { takeEvery, put, all, call } from 'redux-saga/effects';\nimport * as api from './services';\nimport * as CONSTANTS from './constants';\nexport function* login({\n  payload\n}) {\n  try {\n    const data = yield call(api.loginService, payload);\n    yield put({\n      type: CONSTANTS.USER_LOGIN_SUCCESS,\n      pa\n    });\n    localStorage.setItem('token', data.token);\n  } catch (error) {\n    yield put({\n      type: CONSTANTS.USER_LOGIN_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}\nexport function* loginWatcher() {\n  yield takeEvery(CONSTANTS.USER_LOGIN_REQUEST, login);\n}\nexport default function* productSaga() {\n  yield all([loginWatcher()]);\n}","map":{"version":3,"sources":["C:/Users/uzuma/Desktop/hamdiRH/proshop mern/frontend/src/redux/auth/saga.js"],"names":["takeEvery","put","all","call","api","CONSTANTS","login","payload","data","loginService","type","USER_LOGIN_SUCCESS","pa","localStorage","setItem","token","error","USER_LOGIN_FAIL","response","message","loginWatcher","USER_LOGIN_REQUEST","productSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,QAA0C,oBAA1C;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,OAAO,UAAUC,KAAV,CAAgB;AAAEC,EAAAA;AAAF,CAAhB,EAA6B;AAClC,MAAI;AACF,UAAMC,IAAI,GAAG,MAAML,IAAI,CAACC,GAAG,CAACK,YAAL,EAAmBF,OAAnB,CAAvB;AAEA,UAAMN,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEL,SAAS,CAACM,kBADR;AAERC,MAAAA;AAFQ,KAAD,CAAT;AAIAC,IAAAA,YAAY,CAACC,OAAb,CAAqB,OAArB,EAA8BN,IAAI,CAACO,KAAnC;AACD,GARD,CAQE,OAAOC,KAAP,EAAc;AACd,UAAMf,GAAG,CAAC;AACRS,MAAAA,IAAI,EAAEL,SAAS,CAACY,eADR;AAERV,MAAAA,OAAO,EACLS,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,OAAtC,GACIH,KAAK,CAACE,QAAN,CAAeV,IAAf,CAAoBW,OADxB,GAEIH,KAAK,CAACG;AALJ,KAAD,CAAT;AAOD;AACF;AAED,OAAO,UAAUC,YAAV,GAAyB;AAC9B,QAAMpB,SAAS,CAACK,SAAS,CAACgB,kBAAX,EAA+Bf,KAA/B,CAAf;AACD;AAED,eAAe,UAAUgB,WAAV,GAAwB;AACrC,QAAMpB,GAAG,CAAC,CAACkB,YAAY,EAAb,CAAD,CAAT;AACD","sourcesContent":["import { takeEvery, put, all, call } from 'redux-saga/effects';\r\nimport * as api from './services';\r\nimport * as CONSTANTS from './constants';\r\n\r\nexport function* login({ payload }) {\r\n  try {\r\n    const data = yield call(api.loginService, payload);\r\n\r\n    yield put({\r\n      type: CONSTANTS.USER_LOGIN_SUCCESS,\r\n      pa\r\n    });\r\n    localStorage.setItem('token', data.token);\r\n  } catch (error) {\r\n    yield put({\r\n      type: CONSTANTS.USER_LOGIN_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport function* loginWatcher() {\r\n  yield takeEvery(CONSTANTS.USER_LOGIN_REQUEST, login);\r\n}\r\n\r\nexport default function* productSaga() {\r\n  yield all([loginWatcher()]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}