{"ast":null,"code":"import { takeEvery, put, all, call, select } from 'redux-saga/effects';\nimport * as api from './services';\nimport * as CONSTANTS from './constants';\nexport function* createOrderWatcher({\n  order\n}) {\n  try {\n    const data = yield call(api.createOrderService, order);\n    yield put({\n      type: CONSTANTS.CREATE_ORDER_SUCCESS,\n      payload: data\n    });\n  } catch (error) {\n    yield put({\n      type: CONSTANTS.CREATE_ORDER_FAIL,\n      payload: error.response && error.response.data.message ? error.response.data.message : error.message\n    });\n  }\n}\nexport default function* productSaga() {\n  yield all([createOrderWatcher()]);\n}","map":{"version":3,"sources":["C:/Users/uzuma/Desktop/hamdiRH/proshop mern/frontend/src/redux/order/saga.js"],"names":["takeEvery","put","all","call","select","api","CONSTANTS","createOrderWatcher","order","data","createOrderService","type","CREATE_ORDER_SUCCESS","payload","error","CREATE_ORDER_FAIL","response","message","productSaga"],"mappings":"AAAA,SAASA,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,IAA9B,EAAoCC,MAApC,QAAkD,oBAAlD;AACA,OAAO,KAAKC,GAAZ,MAAqB,YAArB;AACA,OAAO,KAAKC,SAAZ,MAA2B,aAA3B;AAEA,OAAO,UAAUC,kBAAV,CAA6B;AAAEC,EAAAA;AAAF,CAA7B,EAAwC;AAC7C,MAAI;AACF,UAAMC,IAAI,GAAG,MAAMN,IAAI,CAACE,GAAG,CAACK,kBAAL,EAAyBF,KAAzB,CAAvB;AAEA,UAAMP,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEL,SAAS,CAACM,oBADR;AAERC,MAAAA,OAAO,EAAEJ;AAFD,KAAD,CAAT;AAKD,GARD,CAQE,OAAOK,KAAP,EAAc;AACd,UAAMb,GAAG,CAAC;AACRU,MAAAA,IAAI,EAAEL,SAAS,CAACS,iBADR;AAERF,MAAAA,OAAO,EACLC,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBQ,OAAtC,GACIH,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBQ,OADxB,GAEIH,KAAK,CAACG;AALJ,KAAD,CAAT;AAOD;AACF;AAED,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMhB,GAAG,CAAC,CAACK,kBAAkB,EAAnB,CAAD,CAAT;AACD","sourcesContent":["import { takeEvery, put, all, call, select } from 'redux-saga/effects';\r\nimport * as api from './services';\r\nimport * as CONSTANTS from './constants';\r\n\r\nexport function* createOrderWatcher({ order }) {\r\n  try {\r\n    const data = yield call(api.createOrderService, order);\r\n\r\n    yield put({\r\n      type: CONSTANTS.CREATE_ORDER_SUCCESS,\r\n      payload: data,\r\n    });\r\n\r\n  } catch (error) {\r\n    yield put({\r\n      type: CONSTANTS.CREATE_ORDER_FAIL,\r\n      payload:\r\n        error.response && error.response.data.message\r\n          ? error.response.data.message\r\n          : error.message,\r\n    });\r\n  }\r\n}\r\n\r\nexport default function* productSaga() {\r\n  yield all([createOrderWatcher()]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}